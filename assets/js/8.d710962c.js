(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{354:function(e,t,a){"use strict";a.r(t);var o=a(42),r=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"vue-reactivity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vue-reactivity"}},[e._v("#")]),e._v(" Vue/Reactivity")]),e._v(" "),a("p",[e._v("reactive api是Vue3.x中创建响应式对象的核心api，它的基本实现原理是通过Proxy来拦截普通的对象的操作，并由此收集依赖或派发更新。\n响应式对象的实现并没有那么复杂，只需记住响应式对象就是Proxy对象，它的核心就是Proxy，在Vue3.x中，响应式对象也分为了以下几种:")]),e._v(" "),a("p",[e._v("1、mutable reactive: 普通的响应式对象\n2、readonly reactive: 只读的响应式对象，不能进行赋值操作。\n3、shallow reactive: 只拦截对象根层级的属性的操作，如果属性的值也是对象，不会对它进行递归响应式化。\n4、shallow readonly reactive: 只读的shallow reactive对象")]),e._v(" "),a("p",[e._v("reactive api除了支持基本的plain object和array外，还支持map、weakmap、set、weakset等collection的响应式化。我们可以通过它的测试用例\n来了解reactive以及它相关api的用法，这对我们学习源码很有帮助，毕竟学习原理之前也要先会用才行。")]),e._v(" "),a("h4",{attrs:{id:"测试用例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#测试用例"}},[e._v("#")]),e._v(" 测试用例")]),e._v(" "),a("p",[e._v("1、reactive的参数必须是一个对象，我们可以像操作一个普通对象一样来操作响应式对象，并且响应式对象不等于原始的对象。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("test('Object', () => {\n  const original = { foo: 1 }\n  const observed = reactive(original)\n  expect(observed).not.toBe(original)\n  expect(isReactive(observed)).toBe(true)\n  expect(isReactive(original)).toBe(false)\n  // get\n  expect(observed.foo).toBe(1)\n  // has\n  expect('foo' in observed).toBe(true)\n  // ownKeys\n  expect(Object.keys(observed)).toEqual(['foo'])\n})\n")])])]),a("p",[e._v("2、一个响应式对象的属性的值如果也是对象的话，那么它也会被响应式化。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("test('nested reactives', () => {\n  const original = {\n    nested: {\n      foo: 1\n    },\n    array: [{ bar: 2 }]\n  }\n  const observed = reactive(original)\n  expect(isReactive(observed.nested)).toBe(true)\n  expect(isReactive(observed.array)).toBe(true)\n  expect(isReactive(observed.array[0])).toBe(true)\n})\n")])])]),a("p",[e._v("3、对一个响应式对象进行操作时，操作同时也会影响到原始的对象。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("test('observed value should proxy mutations to original (Object)', () => {\n  const original: any = { foo: 1 }\n  const observed = reactive(original)\n  // set\n  observed.bar = 1\n  expect(observed.bar).toBe(1)\n  expect(original.bar).toBe(1)\n  // delete\n  delete observed.foo\n  expect('foo' in observed).toBe(false)\n  expect('foo' in original).toBe(false)\n})\n")])])]),a("p",[e._v("4、为一个响应式对象的属性赋值一个对象时，该对象也会变成响应式对象。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("test('setting a property with an unobserved value should wrap with reactive', () => {\n  const observed = reactive<{ foo?: object }>({})\n  const raw = {}\n  observed.foo = raw\n  expect(observed.foo).not.toBe(raw)\n  expect(isReactive(observed.foo)).toBe(true)\n})\n")])])]),a("p",[e._v("5、当传入的参数已经是一个响应式对象时，直接返回该响应式对象。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("test('observing already observed value should return same Proxy', () => {\n  const original = { foo: 1 }\n  const observed = reactive(original)\n  const observed2 = reactive(observed)\n  expect(observed2).toBe(observed)\n})\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);